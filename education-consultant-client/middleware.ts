import { getToken } from "next-auth/jwt";
import { NextRequest, NextResponse } from "next/server";

export async function middleware(req: NextRequest) {
  const token = await getToken({ req, secret: process.env.AUTH_SECRET! });

  console.log("ЁЯФ╣ Token in middleware:", token);

  const { pathname } = req.nextUrl;

  if (token) {
    console.log(`тЬЕ User is authenticated: ${token.email}, Role: ${token.role}`);
  } else {
    console.log("тЭМ No token found, user unauthenticated");
  }

  // ЁЯФ╣ ржпржжрж┐ user рж▓ржЧржЗржи ржХрж░рж╛ ржерж╛ржХрзЗ ржПржмржВ login page ржП ржпрзЗрждрзЗ ржЪрж╛рзЯ, рждрж╛рж╣рж▓рзЗ рждрж╛ржХрзЗ home (/) ржП ржкрж╛ржарж┐рзЯрзЗ ржжрж╛ржУ
  if (token && pathname === "/login") {
    console.log("ЁЯФД Redirecting authenticated user away from login page");
    return NextResponse.redirect(new URL("/", req.url));
  }

  // ЁЯФ╣ ржпржжрж┐ user dashboard ржП ржпрзЗрждрзЗ ржЪрж╛рзЯ ржХрж┐ржирзНрждрзБ token ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рждрж╛ржХрзЗ login page ржП ржкрж╛ржарж┐рзЯрзЗ ржжрж╛ржУ
  if (pathname.startsWith("/dashboard") && !token) {
    console.log("ЁЯФД Redirecting unauthenticated user to /login");
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // ЁЯФ╣ ржпржжрж┐ user token рж░рж╛ржЦрзЗ ржХрж┐ржирзНрждрзБ рждрж╛рж░ role "admin" ржирж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ home (/) ржП ржкрж╛ржарж┐рзЯрзЗ ржжрж╛ржУ
  if (pathname.startsWith("/dashboard") && token?.role !== "admin") {
    console.log("ЁЯФД Redirecting non-admin user to /");
    return NextResponse.redirect(new URL("/", req.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/login", "/dashboard/:path*"], // Login & Dashboard ржПрж░ ржЬржирзНржп middleware ржХрж╛ржЬ ржХрж░ржмрзЗ
};
